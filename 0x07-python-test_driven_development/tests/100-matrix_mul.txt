>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul((2, 4, 6), [[1, 2, 3]]) # tests argument types
Traceback (most recent call last):
...
TypeError: m_a must be a list
>>> matrix_mul([[2, 4, 6], [9, 2, 1]], ((1, 3, 4), (1, 5, 7)))
Traceback (most recent call last):
...
TypeError: m_b must be a list
>>> matrix_mul([1, 5, 8], [2, 4, 6]) # tests dimensionality
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists
>>> matrix_mul([[1, 5, 8]], [2, 4, 6])
Traceback (most recent call last)
...
TypeError: m_b must be a list of lists
>>> matrix_mul([], [[2, 4, 6]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty
>>> matrix_mul([[]], [[24, 5, 6]])
Traceback (most recent call last):
...
ValueError: m_a can't be an empty
>>> matrix_mul([[11, 4]], [])
Traceback (most recent call last)
...
ValueError: m_b can't be empty
>>> matrix([[11, 4]], [[]])
Traceback (most recent call last):
...
ValueError: m_b can't be empty
>>> matrix_mul([[2, "3", 4], [2, 5, 8]], [[2, 4, 6]]) # tests non float or int types
Traceback (most recent call last):
...
TypeError: m_a must should contain only integers or floats
>>> matrix_mul([[2, "3", 4, ('hello')], [2, [], 5, 8]], [[2, 4, 6]])
Traceback (most recent call last):
...
TypeError: m_a must should contain only integers or floats
>>> matrix_mul([[77, 8, 4]], [[2, "3", 4], [2, 5, 8]])
Traceback (most recent call last):
...
TypeError: m_b must should contain only integers or floats
>>> matrix_mul([[89, 939, 59, 0.6], [900, 98]], [[44, 6, 7, 6], [1, 4, 6, 8]]) # tests row sizes
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size
>>> matrix_mul([[9, 90, 10], [2, 34, 10]], [[1, 2, 33], [4, 5])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size
>>> matrix_mul([[1, 2, 4], [2, 4, 5]], 
